/* This file was generated by SableCC (http://www.sablecc.org/). */

package minipython.node;

import java.util.*;
import minipython.analysis.*;

public final class AArithmExpression extends PExpression
{
    private PExpression _e1_;
    private PBinop _binop_;

    public AArithmExpression()
    {
    }

    public AArithmExpression(
        PExpression _e1_,
        PBinop _binop_)
    {
        setE1(_e1_);

        setBinop(_binop_);

    }
    public Object clone()
    {
        return new AArithmExpression(
            (PExpression) cloneNode(_e1_),
            (PBinop) cloneNode(_binop_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArithmExpression(this);
    }

    public PExpression getE1()
    {
        return _e1_;
    }

    public void setE1(PExpression node)
    {
        if(_e1_ != null)
        {
            _e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _e1_ = node;
    }

    public PBinop getBinop()
    {
        return _binop_;
    }

    public void setBinop(PBinop node)
    {
        if(_binop_ != null)
        {
            _binop_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _binop_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_e1_)
            + toString(_binop_);
    }

    void removeChild(Node child)
    {
        if(_e1_ == child)
        {
            _e1_ = null;
            return;
        }

        if(_binop_ == child)
        {
            _binop_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_e1_ == oldChild)
        {
            setE1((PExpression) newChild);
            return;
        }

        if(_binop_ == oldChild)
        {
            setBinop((PBinop) newChild);
            return;
        }

    }
}
